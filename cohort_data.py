def unique_houses(filename):
    """TODO: Create a set of student houses.

    Iterates over the cohort_data.txt file to look for all of the included house names
    and creates a set called 'houses' that holds those names.
z
        ex. houses = set([ "Hufflepuff", 
                    "Slytherin", 
                    "Ravenclaw", 
                    "Gryffindor", 
                    "Dumbledore's Army"
            ])
    
    """
    houses = set()

    cohort_data = open(filename)

    for line in cohort_data:
        line = line.rstrip()
        line = line.split("|")
        if line[2] != "":
            houses.add(line[2])

    return houses
print(unique_houses("cohort_data.txt"))

def sort_by_cohort(filename):
    """TODO: Sort students by cohort.

    Iterates over the data to create a list for each cohort, ordering students
    alphabetically by first name and tas separately. Returns list of lists.

        ex. winter_15 = ["alice tsao", "amanda gilmore", "anne vetto", "..." ]
        ex. all_students = [winter_15, spring_15, tas]
    
    """

    all_students = []
    winter_15 = []
    spring_15 = []
    tas = []

    cohort_data = open(filename)

    for line in cohort_data:
        line = line.rstrip().split("|")
        if line[4] == "Winter 2015":
            winter_15.append(line[0] + " " + line[1])
        elif line[4] == "Spring 2015":
            spring_15.append(line[0] + " " + line[1])

        if line[3] not in tas and line[3] != "":
            tas.append(line[3])

    all_students.extend([winter_15, spring_15, tas])
    return all_students



def students_by_house(filename):
    """TODO: Sort students by house.

    Iterate over the data to create a list for each house, and sort students
    into their appropriate houses by last name. Sort TAs into a list called "tas".
    Return all lists in one list of lists.
        ex. hufflepuff = ["Gaikwad", "Wiedl", "..." ]
        ex. tas = ["Bryant", "Lefevre", "..."]
        ex. houses_tas = [ hufflepuff, 
                        gryffindor, 
                        ravenclaw, 
                        slytherin, 
                        dumbledores_army, 
                        tas 
            ]
    """

    all_students = []
    gryffindor = []
    hufflepuff = []
    slytherin = []
    dumbledores_army = []
    ravenclaw = []
    tas = []

    cohort_data = open(filename)

    for line in cohort_data:
        line = line.rstrip().split("|")
        if line[4] != "Spring 2015" and line[4] != "":
            if line[4] != "Winter 2015":
                tas.append(line[1])
        else:
            if line[2] == "Gryffindor":
                gryffindor.append(line[1])
            elif line[2] == "Slytherin":
                slytherin.append(line[1])
            elif line[2] == "Dumbledore's Army":
                dumbledores_army.append(line[1])
            elif line[2] == "Hufflepuff":
                hufflepuff.append(line[1])
            elif line[2] == "Ravenclaw":
                ravenclaw.append(line[1])
    all_students = [hufflepuff, gryffindor, ravenclaw, slytherin, dumbledores_army, tas]
    return all_students



def all_students_tuple_list(filename):
    """TODO: Create a list of tuples of student data.

    Iterates over the data to create a big list of tuples that individually
    hold all the data for each person. (full_name, house, advisor, cohort)
        ex. all_people = [
                ("Alice Tsao", "Slytherin", "Kristen", "Winter 2015"),
                ("Amanda Gilmore", "Hufflepuff", "Meggie", "Winter 2015"),
                # ...
            ]
    """

    student_list = []

    cohort_data = open(filename)

    for line in cohort_data:
        line = line.rstrip().split("|")
        if line[4] == "Spring 2015" or line[4] == "Winter 2015":
            student_list.append((line[0] + " " + line[1], line[2], line[3], line[4]))
    return student_list
# print(all_students_tuple_list("cohort_data.txt"))

def find_cohort_by_student_name(student_list):
    """TODO: Given full name, return student's cohort.

    Use the above list of tuples generated by the preceding function to make a small
    function that, given a first and last name, returns that student's cohort, or returns
    'Student not found.' when appropriate. """

    student_name = raw_input("Which student do you want to find?")
    the_student = None

    found = False
    cnt = 0

    # have to have the length of student info as a terminating condition if the 
    # name isn't found. 
    while not found and cnt < len(student_list):
        if student_list[cnt][0] == student_name:
            the_student = student_list[cnt]
            found = True
        cnt += 1

    if found:
        return the_student
    else:
        return "Student not found."
# print(find_cohort_by_student_name(all_students_tuple_list("cohort_data.txt")))


##########################################################################################
# Further Study Questions

def find_house_members_by_student_name(student_list):
    """TODO: Create a function that, when given a name, returns everyone in
    their house that's in their cohort.

    Use the list of tuples generated by all_students_tuple_list to make a small function that,
    when given a student's first and last name, returns students that are in both that
    student's cohort and that student's house."""

    student_name = raw_input("Which student do you want to find")
    cnt = 0
    found = False

    while not found and cnt < len(student_list):
        if student_name == student_list[cnt][0]:
            # do something
        else:
            return "Student not found"

    return
print(find_house_members_by_student_name(all_students_tuple_list("cohort_data.txt")))

